package com.knight.app.Controller;

import com.fasterxml.jackson.databind.util.JSONPObject;
import com.knight.app.Model.Policy;
import com.knight.app.Model.Staff;
import com.knight.app.Model.User;
import com.knight.app.Repository.PolicyRepository;
import com.knight.app.Repository.StaffRepository;
import com.knight.app.Repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@CrossOrigin
@RequestMapping(path="/staff") // This means URL's start with /demo (after Application path)
public class StaffController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private StaffRepository staffRepository;
	private PolicyRepository policyRepository;

//	@PostMapping(path="/register") // Map ONLY POST Requests
//	public @ResponseBody String addNewUser (@RequestParam String phone
//			, @RequestParam String password) {
//		// @ResponseBody means the returned String is the response, not a view name
//		// @RequestParam means it is a parameter from the GET or POST request
//
//		if (userRepository.existsById(Integer.valueOf(phone))){
//			return "Wrong: the user already exists";
//		}
//
//		User n = new User();
//		n.setPhone(phone);
//		n.setPassword(password);
//		n.setId(Integer.parseInt(phone));
//		userRepository.save(n);
//		return "Success Saved id:"+n.getId();
//
//	}

	@PostMapping(path="/login") // Map ONLY POST Requests
	public @ResponseBody String login (@RequestBody Staff staff) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

        Staff staff1 = staffRepository.findById(Integer.valueOf(staff.getPhone())).orElse(null);

		if (staff1 == null){
            if (! staffRepository.existsById(Integer.valueOf(staff.getPhone()))){
                return "not exist";
            }else{
                return "wrong password ";
            }
		}else{
            return "account.html";
		}
	}

	@PostMapping(path="/lost_luggage") // Map ONLY POST Requests
	public @ResponseBody Policy lost_luggage (@RequestBody String policy_number) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

//        JSONPObject a = new JSONPObject(policy_number);

		if (! policyRepository.existsById(Integer.valueOf(policy_number))){
			return new Policy();
		}

		Policy policy = policyRepository.findById(Integer.valueOf(policy_number)).orElse(null);
		return policy;
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Staff> getAllUsers() {
		// This returns a JSON or XML with the users
		return staffRepository.findAll();
	}

}
