package com.knight.app.Controller;

import com.knight.app.Model.User;
import com.knight.app.Repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@CrossOrigin
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/register") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String phone
			, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		if (userRepository.existsById(Integer.valueOf(phone))){
			return "Wrong: the user already exists";
		}

		User n = new User();
		n.setPhone(phone);
		n.setPassword(password);
		n.setId(Integer.parseInt(phone));
		userRepository.save(n);
		return "Success Saved id:"+n.getId();

	}

	@PostMapping(path="/login") // Map ONLY POST Requests
	public @ResponseBody String login (@RequestParam String phone
			, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

        User user = userRepository.findById(Integer.valueOf(phone)).orElse(null);

		if (user == null){
            if (! userRepository.existsById(Integer.valueOf(phone))){
                return "not exist";
            }else{
                return "wrong password ";
            }
		}else{
            return "user.html-zh";
		}
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

}
